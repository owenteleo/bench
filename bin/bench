#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from src.configuration import ConfigurationV1 as Configuration
from src.commands import config, serve

import asyncio
import click
import pathlib
import sys
import tomllib
import yaml
import traceback

from loguru import logger

class Context:
    """
    Testbench context.
    """
    def __init__(self, config):
        self._config = config
        self._loop = asyncio.new_event_loop()

    @property
    def cfg(self):
        return self._config
    
    @property
    def loop(self):
        return self._loop

def test_env():
    """
    Simple tests to ensure that the environment is set up correctly.
    This is a little paranoid. It could be skipped if you like to live dangerously.
    """
    import os
    import sys

    this_file = os.path.abspath(__file__)
    root = os.path.dirname(os.path.dirname(this_file))
    try:
        assert sys.executable.startswith(os.path.join(root, "venv", "bin"))
    except AssertionError:
        msg = "Python not executing from within the virtual environment."
        logger.error(msg)
        logger.debug(f"Root: {root}")
        logger.debug(f"This file: {this_file}")
        logger.debug(f"Executable: {sys.executable}")
        raise AssertionError(msg)


def get_version():
    here = pathlib.Path(__file__).parent
    root = here.parent
    pyproject_path = root / "pyproject.toml"
    if pyproject_path.exists():
        with pyproject_path.open("rb") as f:
            data = tomllib.load(f)
            return data.get("project", {}).get("version", "0.0.0")
    return "0.0.0" # 0.0.0 is reserved meaning "no version"

@click.group()
@click.option("--config", "-c", default=pathlib.Path("./config.yml"), help="Path to the configuration file.")
@click.option("--no-config", is_flag=True, help="Do not use a configuration file. Takes precedence over --config.")
@click.option("--host", default=None, help="The host to bind to.")
@click.option("--port", default=None, help="The port to bind to.")
@click.option("--verbose", "-v", count=True, default=1, help="Increase verbosity. Can be specified multiple times. Ignored if --quiet is specified.")
@click.option("--quiet", "-q", is_flag=True, help="Suppress all output. Takes precedence over --verbose.")
@click.version_option(version=get_version())
@click.pass_context
def bench(
    context,
    no_config,
    host,
    config,
    port,
    verbose,
    quiet,
):
    """
    Teleo testbench.
    """

    logger.remove()
    if not quiet:
        match verbose:
            case 0:
                logger.add(sys.stderr, level="WARNING")
            case 1:
                logger.add(sys.stderr, level="INFO")
            case 2:
                logger.add(sys.stderr, level="DEBUG")
            case 3:
                logger.add(sys.stderr, level="TRACE")
            case _:
                logger.add(sys.stderr, level="TRACE")

    try:
        test_env()
    except:
        logger.warning("Refusing to run 'bench.'")
        sys.exit(1)

    logger.debug("Building configuration")
    if not no_config and config is not None:
        logger.trace(f"Using configuration file: {config}")
        try:
            with open(config, "r") as f:
                data = yaml.safe_load(f)
                builder = Configuration.builder().from_dict(data)
        except Exception as e:
            logger.info(traceback.format_exc())
            logger.error(e)

            print("\033[1;38;5;196merror\033[0m: ", end="")
            print(f"Failed to load configuration '{config}'.")

            print("\033[1;38;5;208mhint\033[0m: ", end="")
            print("Generate an example configuration using '\033[1;38;5;177mbench --no-config config emit --example --profile default --output config.yml\033[0m'.")

            sys.exit(1)
    else:
        if no_config:
            logger.trace("Ignoring configuration file. (--no-config)")
        logger.trace("Using defaults")
        builder = Configuration.builder()

    if port is not None:
        logger.trace(f"Using command line port: {port}")
        builder.with_port(port)

    if host is not None:
        logger.trace(f"Using command line host: {host}")
        builder.with_host(host)        

    cfg = builder.build()
    ctx = Context(cfg)
    context.obj = ctx

bench.add_command(config)
bench.add_command(serve)

if __name__ == "__main__":
    bench()
